import { useContext } from 'react';

import { EventContext } from '@/entities/event/model/EventContext';

export const useEventForm = () => {
  const context = useContext(EventContext);
  if (!context) {
    throw new Error('useEventForm must be used within EventProvider');
  }

  const {
    events,
    saveEvent,
    editEvent,
    fetchEvents,
    deleteEvent,
    editingEvent,
    setEditingEvent,
    title,
    setTitle,
    date,
    setDate,
    startTime,
    setStartTime,
    endTime,
    setEndTime,
    description,
    setDescription,
    location,
    setLocation,
    category,
    setCategory,
    isRepeating,
    setIsRepeating,
    repeatType,
    setRepeatType,
    repeatInterval,
    setRepeatInterval,
    repeatEndDate,
    setRepeatEndDate,
    notificationTime,
    setNotificationTime,
    startTimeError,
    endTimeError,
    overlappingEvents,
    isOverlapDialogOpen,
    setIsOverlapDialogOpen,
    handleStartTimeChange,
    handleEndTimeChange,
    addOrUpdateEvent,
  } = context;
  return {
    events,
    saveEvent,
    editEvent,
    fetchEvents,
    deleteEvent,
    editingEvent,
    setEditingEvent,
    title,
    setTitle,
    date,
    setDate,
    startTime,
    setStartTime,
    endTime,
    setEndTime,
    description,
    setDescription,
    location,
    setLocation,
    category,
    setCategory,
    isRepeating,
    setIsRepeating,
    repeatType,
    setRepeatType,
    repeatInterval,
    setRepeatInterval,
    repeatEndDate,
    setRepeatEndDate,
    notificationTime,
    setNotificationTime,
    startTimeError,
    endTimeError,
    overlappingEvents,
    isOverlapDialogOpen,
    setIsOverlapDialogOpen,
    handleStartTimeChange,
    handleEndTimeChange,
    addOrUpdateEvent,
  };
};
